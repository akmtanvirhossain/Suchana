package org.icddrb.suchana;//Android Manifest Code//<activity android:name=".Screening" android:label="Screening" />import android.app.Activity;import android.app.AlertDialog;import android.app.DatePickerDialog;import android.app.Dialog;import android.app.TimePickerDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.net.Uri;import android.os.Bundle;import android.provider.Settings;import android.text.Editable;import android.text.TextWatcher;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageButton;import android.widget.LinearLayout;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.SimpleAdapter;import android.widget.Spinner;import android.widget.TextView;import android.widget.TimePicker;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import Common.Connection;import Common.Global;public class Screening extends Activity {    static final int DATE_DIALOG = 1;    static final int TIME_DIALOG = 2;    static String TableName;    static String RND = "";    static String SCREENINGID = "";    boolean networkAvailable=false;    Location currentLocation;    double currentLatitude,currentLongitude;    String VariableID;    String DIS = "";    String UPZ = "";    String UN = "";    String VILL = "";    Connection C;    Global g;    SimpleAdapter dataAdapter;    ArrayList<HashMap<String, String>> dataList = new ArrayList<HashMap<String, String>>();    TextView lblHeading;    LinearLayout seclbl1;    LinearLayout seclbl2;    LinearLayout secRnd;    View lineRnd;    TextView VlblRnd;    EditText txtRnd;    LinearLayout secDist;    View lineDist;    TextView VlblDist;    Spinner spnDist;    LinearLayout secUpz;    View lineUpz;    TextView VlblUpz;    Spinner spnUpz;    LinearLayout secUn;    View lineUn;    TextView VlblUn;    Spinner spnUn;    LinearLayout secVill;    View lineVill;    TextView VlblVill;    Spinner spnVill;    LinearLayout secWard;    View lineWard;    TextView VlblWard;    EditText txtWard;    LinearLayout secVDate;    View lineVDate;    TextView VlblVDate;    EditText dtpVDate;    LinearLayout secImpOrg;    View lineImpOrg;    TextView VlblImpOrg;    RadioGroup rdogrpImpOrg;    RadioButton rdoImpOrg1;    RadioButton rdoImpOrg2;    RadioButton rdoImpOrg3;    LinearLayout secHHType;    View lineHHType;    TextView VlblHHType;    RadioGroup rdogrpHHType;    RadioButton rdoHHType1;    RadioButton rdoHHType2;    LinearLayout seclbl3;    LinearLayout secWRUn;    View lineWRUn;    TextView VlblWRUn;    EditText txtWRUn;    LinearLayout secWRVill;    View lineWRVill;    TextView VlblWRVill;    EditText txtWRVill;    LinearLayout secWRNo;    View lineWRNo;    TextView VlblWRNo;    EditText txtWRNo;    LinearLayout secWRHHNo;    View lineWRHHNo;    TextView VlblWRHHNo;    EditText txtWRHHNo;    LinearLayout seclbl4;    LinearLayout secHHDist;    View lineHHDist;    TextView VlblHHDist;    EditText txtHHDist;    LinearLayout secHHUpz;    View lineHHUpz;    TextView VlblHHUpz;    EditText txtHHUpz;    LinearLayout secHHUn;    View lineHHUn;    TextView VlblHHUn;    EditText txtHHUn;    LinearLayout secHHVill;    View lineHHVill;    TextView VlblHHVill;    EditText txtHHVill;    LinearLayout secHHNo;    View lineHHNo;    TextView VlblHHNo;    EditText txtHHNo;    LinearLayout secScreeningID;    View lineScreeningID;    TextView VlblScreeningID;    EditText txtScreeningID;    LinearLayout secBenName;    View lineBenName;    TextView VlblBenName;    EditText txtBenName;    LinearLayout secHeadName;    View lineHeadName;    TextView VlblHeadName;    EditText txtHeadName;    LinearLayout seclbl5;    LinearLayout secFName;    View lineFName;    TextView VlblFName;    EditText txtFName;    LinearLayout secHsuName;    View lineHsuName;    TextView VlblHsuName;    EditText txtHsuName;    LinearLayout seclbl6;    LinearLayout secMobNo;    View lineMobNo;    TextView VlblMobNo;    EditText txtMobNo;    LinearLayout secReqMobNo;    View lineReqMobNo;    TextView VlblReqMobNo;    EditText txtReqMobNo;    LinearLayout secHHLocation;    View lineHHLocation;    TextView VlblHHLocation;    EditText txtHHLocation;    LinearLayout secResName;    View lineResName;    TextView VlblResName;    EditText txtResName;    LinearLayout secRelation;    View lineRelation;    TextView VlblRelation;    Spinner spnRelation;    LinearLayout seclbl7;    LinearLayout secQ1;    View lineQ1;    TextView VlblQ1;    RadioGroup rdogrpQ1;    RadioButton rdoQ11;    RadioButton rdoQ12;    LinearLayout secQ2;    View lineQ2;    TextView VlblQ2;    RadioGroup rdogrpQ2;    RadioButton rdoQ21;    RadioButton rdoQ22;    LinearLayout secQ3;    View lineQ3;    TextView VlblQ3;    RadioGroup rdogrpQ3;    RadioButton rdoQ31;    RadioButton rdoQ32;    LinearLayout secQ4;    View lineQ4;    TextView VlblQ4;    RadioGroup rdogrpQ4;    RadioButton rdoQ41;    RadioButton rdoQ42;    LinearLayout secQ5;    View lineQ5;    TextView VlblQ5;    RadioGroup rdogrpQ5;    RadioButton rdoQ51;    RadioButton rdoQ52;    LinearLayout secQ6;    View lineQ6;    TextView VlblQ6;    RadioGroup rdogrpQ6;    RadioButton rdoQ61;    RadioButton rdoQ62;    LinearLayout secQ7;    View lineQ7;    TextView VlblQ7;    RadioGroup rdogrpQ7;    RadioButton rdoQ71;    RadioButton rdoQ72;    LinearLayout secQ8;    View lineQ8;    TextView VlblQ8;    RadioGroup rdogrpQ8;    RadioButton rdoQ81;    RadioButton rdoQ82;    LinearLayout secQ8a;    View lineQ8a;    TextView VlblQ8a;    EditText txtQ8a;    LinearLayout secQ9;    View lineQ9;    TextView VlblQ9;    RadioGroup rdogrpQ9;    RadioButton rdoQ91;    RadioButton rdoQ92;    LinearLayout secBDate;    View lineBDate;    TextView VlblBDate;    EditText dtpBDate;    LinearLayout secQ9a;    View lineQ9a;    TextView VlblQ9a;    RadioGroup rdogrpQ9a;    RadioButton rdoQ9a1;    RadioButton rdoQ9a2;    RadioButton rdoQ9a3;    RadioButton rdoQ9a4;    LinearLayout secQ10;    View lineQ10;    TextView VlblQ10;    RadioGroup rdogrpQ10;    RadioButton rdoQ101;    RadioButton rdoQ102;    LinearLayout secQ10a;    View lineQ10a;    TextView VlblQ10a;    RadioGroup rdogrpQ10a;    RadioButton rdoQ10a1;    RadioButton rdoQ10a2;    LinearLayout seclbl8;    LinearLayout secQ11;    View lineQ11;    TextView VlblQ11;    RadioGroup rdogrpQ11;    RadioButton rdoQ111;    RadioButton rdoQ112;    LinearLayout secComments;    View lineComments;    TextView VlblComments;    EditText txtComments;    LinearLayout seclbl81;    String StartTime;    Bundle IDbundle;    private int hour;    private int minute;    private int mDay;    private int mMonth;    private int mYear;    private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {            mYear = year;            mMonth = monthOfYear + 1;            mDay = dayOfMonth;            EditText dtpDate;            dtpDate = (EditText) findViewById(R.id.dtpVDate);            if (VariableID.equals("btnVDate")) {                dtpDate = (EditText) findViewById(R.id.dtpVDate);            } else if (VariableID.equals("btnBDate")) {                dtpDate = (EditText) findViewById(R.id.dtpBDate);            }            dtpDate.setText(new StringBuilder()                    .append(Global.Right("00" + mDay, 2)).append("/")                    .append(Global.Right("00" + mMonth, 2)).append("/")                    .append(mYear));        }    };    private TimePickerDialog.OnTimeSetListener timePickerListener = new TimePickerDialog.OnTimeSetListener() {        public void onTimeSet(TimePicker view, int selectedHour, int selectedMinute) {            hour = selectedHour;            minute = selectedMinute;            EditText tpTime;            //tpTime.setText(new StringBuilder().append(Global.Right("00"+hour,2)).append(":").append(Global.Right("00"+minute,2)));        }    };    //Disabled Back/Home key    //--------------------------------------------------------------------------------------------------    @Override    public boolean onKeyDown(int iKeyCode, KeyEvent event) {        if (iKeyCode == KeyEvent.KEYCODE_BACK || iKeyCode == KeyEvent.KEYCODE_HOME) {            return false;        } else {            return true;        }    }    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        try        {            setContentView(R.layout.screening);            C = new Connection(this);            g = Global.getInstance();            StartTime = g.CurrentTime24();            IDbundle = getIntent().getExtras();            RND = IDbundle.getString("Rnd");            SCREENINGID = IDbundle.getString("ScreeningID");            TableName = "Screening";            //turnGPSOn();            //GPS Location            //FindLocation();            // Double.toString(currentLatitude);            // Double.toString(currentLongitude);            lblHeading = (TextView)findViewById(R.id.lblHeading);            ImageButton cmdBack = (ImageButton) findViewById(R.id.cmdBack);            cmdBack.setOnClickListener(new View.OnClickListener() {                public void onClick(View v) {                    AlertDialog.Builder adb = new AlertDialog.Builder(Screening.this);                    adb.setTitle("Close");                    adb.setMessage("Do you want to close this form[Yes/No]?");                    adb.setNegativeButton("No", null);                    adb.setPositiveButton("Yes", new AlertDialog.OnClickListener() {                        public void onClick(DialogInterface dialog, int which) {                            finish();                        }});                    adb.show();                }});            seclbl81=(LinearLayout)findViewById(R.id.seclbl81);            seclbl1=(LinearLayout)findViewById(R.id.seclbl1);            seclbl2=(LinearLayout)findViewById(R.id.seclbl2);            secRnd=(LinearLayout)findViewById(R.id.secRnd);            lineRnd=(View)findViewById(R.id.lineRnd);            VlblRnd=(TextView) findViewById(R.id.VlblRnd);            txtRnd=(EditText) findViewById(R.id.txtRnd);            secDist=(LinearLayout)findViewById(R.id.secDist);            lineDist=(View)findViewById(R.id.lineDist);            VlblDist=(TextView) findViewById(R.id.VlblDist);            spnDist=(Spinner) findViewById(R.id.spnDist);            spnDist.setAdapter(C.getArrayAdapter("Select '' DistCode union select distinct DistCode||'-'||DistName from VillageList order by DistCode"));            secUpz=(LinearLayout)findViewById(R.id.secUpz);            lineUpz=(View)findViewById(R.id.lineUpz);            VlblUpz=(TextView) findViewById(R.id.VlblUpz);            spnUpz=(Spinner) findViewById(R.id.spnUpz);            spnDist.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {                    //SuchanaIdBuilder[0] = String.valueOf(id);                    GenerateSuchanaID();                    String D = Connection.SelectedSpinnerValue(spnDist.getSelectedItem().toString(), "-");                    spnUpz.setAdapter(C.getArrayAdapter("Select '' union Select distinct UPZCode||'-'||UPZName from VillageList where DistCode='" + D + "'"));                    spnUpz.setSelection(Global.SpinnerItemPositionAnyLength(spnUpz, UPZ));                    txtHHDist.setText(D);                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                }            });            secUn=(LinearLayout)findViewById(R.id.secUn);            lineUn=(View)findViewById(R.id.lineUn);            VlblUn=(TextView) findViewById(R.id.VlblUn);            spnUn=(Spinner) findViewById(R.id.spnUn);            spnUpz.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {                    GenerateSuchanaID();                    //SuchanaIdBuilder[1] = String.valueOf(id);                    String D = Connection.SelectedSpinnerValue(spnDist.getSelectedItem().toString(), "-");                    String U = Connection.SelectedSpinnerValue(spnUpz.getSelectedItem().toString(), "-");                    spnUn.setAdapter(C.getArrayAdapter("Select '' union Select distinct UNCode||'-'||UNName from VillageList where DistCode='" + D + "' and UpzCode='" + U + "'"));                    spnUn.setSelection(Global.SpinnerItemPositionAnyLength(spnUn, UN));                    txtHHUpz.setText(U);                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                }            });            secVill=(LinearLayout)findViewById(R.id.secVill);            lineVill=(View)findViewById(R.id.lineVill);            VlblVill=(TextView) findViewById(R.id.VlblVill);            spnVill=(Spinner) findViewById(R.id.spnVill);            spnUn.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {                    GenerateSuchanaID();                    //SuchanaIdBuilder[2] = String.valueOf(id);                    String D = Connection.SelectedSpinnerValue(spnDist.getSelectedItem().toString(), "-");                    String U = Connection.SelectedSpinnerValue(spnUpz.getSelectedItem().toString(), "-");                    String UN = Connection.SelectedSpinnerValue(spnUn.getSelectedItem().toString(), "-");                    spnVill.setAdapter(C.getArrayAdapter("Select '' union Select distinct VillCode||'-'||VillName from VillageList where DistCode='" + D + "' and UpzCode='" + U + "' and UNCode='" + UN + "'"));                    spnVill.setSelection(Global.SpinnerItemPositionAnyLength(spnVill, VILL));                    txtWRUn.setText(UN);                    txtHHUn.setText(UN);                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                }            });            spnVill.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {                    txtWRVill.setText(Connection.SelectedSpinnerValue(spnVill.getSelectedItem().toString(), "-"));                    txtHHVill.setText(Connection.SelectedSpinnerValue(spnVill.getSelectedItem().toString(), "-"));                    GenerateSuchanaID();                    //SuchanaIdBuilder[0] = String.valueOf(id);                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                }            });            secWard=(LinearLayout)findViewById(R.id.secWard);            lineWard=(View)findViewById(R.id.lineWard);            VlblWard=(TextView) findViewById(R.id.VlblWard);            txtWard=(EditText) findViewById(R.id.txtWard);            secVDate=(LinearLayout)findViewById(R.id.secVDate);            lineVDate=(View)findViewById(R.id.lineVDate);            VlblVDate=(TextView) findViewById(R.id.VlblVDate);            dtpVDate=(EditText) findViewById(R.id.dtpVDate);            secImpOrg=(LinearLayout)findViewById(R.id.secImpOrg);            lineImpOrg=(View)findViewById(R.id.lineImpOrg);            VlblImpOrg = (TextView) findViewById(R.id.VlblImpOrg);            rdogrpImpOrg = (RadioGroup) findViewById(R.id.rdogrpImpOrg);            rdoImpOrg1 = (RadioButton) findViewById(R.id.rdoImpOrg1);            rdoImpOrg2 = (RadioButton) findViewById(R.id.rdoImpOrg2);            rdoImpOrg3 = (RadioButton) findViewById(R.id.rdoImpOrg3);            secHHType=(LinearLayout)findViewById(R.id.secHHType);            lineHHType=(View)findViewById(R.id.lineHHType);            VlblHHType = (TextView) findViewById(R.id.VlblHHType);            rdogrpHHType = (RadioGroup) findViewById(R.id.rdogrpHHType);            rdoHHType1 = (RadioButton) findViewById(R.id.rdoHHType1);            rdoHHType2 = (RadioButton) findViewById(R.id.rdoHHType2);            seclbl3=(LinearLayout)findViewById(R.id.seclbl3);            secWRUn=(LinearLayout)findViewById(R.id.secWRUn);            lineWRUn=(View)findViewById(R.id.lineWRUn);            VlblWRUn=(TextView) findViewById(R.id.VlblWRUn);            txtWRUn=(EditText) findViewById(R.id.txtWRUn);            secWRVill=(LinearLayout)findViewById(R.id.secWRVill);            lineWRVill=(View)findViewById(R.id.lineWRVill);            VlblWRVill=(TextView) findViewById(R.id.VlblWRVill);            txtWRVill=(EditText) findViewById(R.id.txtWRVill);            secWRNo=(LinearLayout)findViewById(R.id.secWRNo);            lineWRNo=(View)findViewById(R.id.lineWRNo);            VlblWRNo=(TextView) findViewById(R.id.VlblWRNo);            txtWRNo=(EditText) findViewById(R.id.txtWRNo);            secWRHHNo=(LinearLayout)findViewById(R.id.secWRHHNo);            lineWRHHNo=(View)findViewById(R.id.lineWRHHNo);            VlblWRHHNo=(TextView) findViewById(R.id.VlblWRHHNo);            txtWRHHNo=(EditText) findViewById(R.id.txtWRHHNo);            txtWRHHNo.addTextChangedListener(new TextWatcher() {                @Override                public void beforeTextChanged(CharSequence s, int start, int count, int after) {                }                @Override                public void onTextChanged(CharSequence s, int start, int before, int count) {                }                @Override                public void afterTextChanged(Editable s) {                    GenerateSuchanaID();                    //SuchanaIdBuilder[4] = txtH11.getText().toString();                }            });            seclbl4=(LinearLayout)findViewById(R.id.seclbl4);            secHHDist=(LinearLayout)findViewById(R.id.secHHDist);            lineHHDist=(View)findViewById(R.id.lineHHDist);            VlblHHDist=(TextView) findViewById(R.id.VlblHHDist);            txtHHDist=(EditText) findViewById(R.id.txtHHDist);            secHHUpz=(LinearLayout)findViewById(R.id.secHHUpz);            lineHHUpz=(View)findViewById(R.id.lineHHUpz);            VlblHHUpz=(TextView) findViewById(R.id.VlblHHUpz);            txtHHUpz=(EditText) findViewById(R.id.txtHHUpz);            secHHUn=(LinearLayout)findViewById(R.id.secHHUn);            lineHHUn=(View)findViewById(R.id.lineHHUn);            VlblHHUn=(TextView) findViewById(R.id.VlblHHUn);            txtHHUn=(EditText) findViewById(R.id.txtHHUn);            secHHVill=(LinearLayout)findViewById(R.id.secHHVill);            lineHHVill=(View)findViewById(R.id.lineHHVill);            VlblHHVill=(TextView) findViewById(R.id.VlblHHVill);            txtHHVill=(EditText) findViewById(R.id.txtHHVill);            secHHNo=(LinearLayout)findViewById(R.id.secHHNo);            lineHHNo=(View)findViewById(R.id.lineHHNo);            VlblHHNo=(TextView) findViewById(R.id.VlblHHNo);            txtHHNo=(EditText) findViewById(R.id.txtHHNo);            secScreeningID=(LinearLayout)findViewById(R.id.secScreeningID);            lineScreeningID=(View)findViewById(R.id.lineScreeningID);            VlblScreeningID=(TextView) findViewById(R.id.VlblScreeningID);            txtScreeningID=(EditText) findViewById(R.id.txtScreeningID);            secBenName=(LinearLayout)findViewById(R.id.secBenName);            lineBenName=(View)findViewById(R.id.lineBenName);            VlblBenName=(TextView) findViewById(R.id.VlblBenName);            txtBenName=(EditText) findViewById(R.id.txtBenName);            secHeadName=(LinearLayout)findViewById(R.id.secHeadName);            lineHeadName=(View)findViewById(R.id.lineHeadName);            VlblHeadName=(TextView) findViewById(R.id.VlblHeadName);            txtHeadName=(EditText) findViewById(R.id.txtHeadName);            seclbl5=(LinearLayout)findViewById(R.id.seclbl5);            secFName=(LinearLayout)findViewById(R.id.secFName);            lineFName=(View)findViewById(R.id.lineFName);            VlblFName=(TextView) findViewById(R.id.VlblFName);            txtFName=(EditText) findViewById(R.id.txtFName);            secHsuName=(LinearLayout)findViewById(R.id.secHsuName);            lineHsuName=(View)findViewById(R.id.lineHsuName);            VlblHsuName=(TextView) findViewById(R.id.VlblHsuName);            txtHsuName=(EditText) findViewById(R.id.txtHsuName);            seclbl6=(LinearLayout)findViewById(R.id.seclbl6);            secMobNo=(LinearLayout)findViewById(R.id.secMobNo);            lineMobNo=(View)findViewById(R.id.lineMobNo);            VlblMobNo=(TextView) findViewById(R.id.VlblMobNo);            txtMobNo=(EditText) findViewById(R.id.txtMobNo);            secReqMobNo=(LinearLayout)findViewById(R.id.secReqMobNo);            lineReqMobNo=(View)findViewById(R.id.lineReqMobNo);            VlblReqMobNo=(TextView) findViewById(R.id.VlblReqMobNo);            txtReqMobNo=(EditText) findViewById(R.id.txtReqMobNo);            secHHLocation=(LinearLayout)findViewById(R.id.secHHLocation);            lineHHLocation=(View)findViewById(R.id.lineHHLocation);            VlblHHLocation=(TextView) findViewById(R.id.VlblHHLocation);            txtHHLocation=(EditText) findViewById(R.id.txtHHLocation);            secResName=(LinearLayout)findViewById(R.id.secResName);            lineResName=(View)findViewById(R.id.lineResName);            VlblResName=(TextView) findViewById(R.id.VlblResName);            txtResName=(EditText) findViewById(R.id.txtResName);            secRelation=(LinearLayout)findViewById(R.id.secRelation);            lineRelation=(View)findViewById(R.id.lineRelation);            VlblRelation=(TextView) findViewById(R.id.VlblRelation);            spnRelation=(Spinner) findViewById(R.id.spnRelation);            List<String> listRelation = new ArrayList<String>();            listRelation.add("");            listRelation.add("01-উপকারভোগীর মা");            listRelation.add("02-উপকারভোগীর স্বামী অথবা স্ত্রী");            listRelation.add("03-পুত্র অথবা  কন্যা");            listRelation.add("04-পুত্রবধূ অথবা  জামাতা");            listRelation.add("05-নাতি অথবা  নাতনী");            listRelation.add("06-উপকারভোগীর বাবা");            listRelation.add("07-ভাই অথবা  বোন");            listRelation.add("08-ভাতিজি অথবা ভাতিজা অথবা ভাগ্নী অথবা ভাগিনা");            listRelation.add("09-উপকারভোগীর cousin");            listRelation.add("10-উপকারভোগী");            listRelation.add("11-শ্বশুর অথবা শাশুড়ী");            listRelation.add("12-দুলাভাই অথবা শালা অথবা শালী অথবা ননদ অথবা জা");            listRelation.add("13-স্বামীর ভাতিজি অথবা ভাতিজা অথবা ভাগ্নী অথবা ভাগিনা");            listRelation.add("14-স্বামীর cousin");            listRelation.add("15-অন্যান্য আত্মীয়");            listRelation.add("16-স্থায়ী গৃহকর্মী");            listRelation.add("17-অন্যান্য অনাত্মীয় অথবা বন্ধু");            ArrayAdapter<String> adptrRelation= new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, listRelation);            spnRelation.setAdapter(adptrRelation);            seclbl7=(LinearLayout)findViewById(R.id.seclbl7);            secQ1=(LinearLayout)findViewById(R.id.secQ1);            lineQ1=(View)findViewById(R.id.lineQ1);            VlblQ1 = (TextView) findViewById(R.id.VlblQ1);            rdogrpQ1 = (RadioGroup) findViewById(R.id.rdogrpQ1);            rdoQ11 = (RadioButton) findViewById(R.id.rdoQ11);            rdoQ12 = (RadioButton) findViewById(R.id.rdoQ12);            rdogrpQ1.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ1 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ1.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ1.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ1[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        secQ2.setVisibility(View.GONE);                        lineQ2.setVisibility(View.GONE);                        rdogrpQ2.clearCheck();                        secQ3.setVisibility(View.GONE);                        lineQ3.setVisibility(View.GONE);                        rdogrpQ3.clearCheck();                        secQ4.setVisibility(View.GONE);                        lineQ4.setVisibility(View.GONE);                        rdogrpQ4.clearCheck();                        secQ5.setVisibility(View.GONE);                        lineQ5.setVisibility(View.GONE);                        rdogrpQ5.clearCheck();                        secQ6.setVisibility(View.GONE);                        lineQ6.setVisibility(View.GONE);                        rdogrpQ6.clearCheck();                        secQ7.setVisibility(View.GONE);                        lineQ7.setVisibility(View.GONE);                        rdogrpQ7.clearCheck();                         secQ8.setVisibility(View.GONE);                        lineQ8.setVisibility(View.GONE);                        rdogrpQ8.clearCheck();                        secQ8a.setVisibility(View.GONE);                        lineQ8a.setVisibility(View.GONE);                        txtQ8a.setText("");                        secQ9.setVisibility(View.GONE);                        lineQ9.setVisibility(View.GONE);                        rdogrpQ9.clearCheck();                        secBDate.setVisibility(View.GONE);                        lineBDate.setVisibility(View.GONE);                        dtpBDate.setText("");                        secQ9a.setVisibility(View.GONE);                        lineQ9a.setVisibility(View.GONE);                        rdogrpQ9a.clearCheck();                        secQ10.setVisibility(View.GONE);                        lineQ10.setVisibility(View.GONE);                        rdogrpQ10.clearCheck();                        secQ10a.setVisibility(View.GONE);                        lineQ10a.setVisibility(View.GONE);                        rdogrpQ10a.clearCheck();                        secQ11.setVisibility(View.GONE);                        lineQ11.setVisibility(View.GONE);                        rdogrpQ11.clearCheck();                        seclbl8.setVisibility(View.GONE);                        seclbl81.setVisibility(View.GONE);                    }                    else                    {                        secQ2.setVisibility(View.VISIBLE);                        lineQ2.setVisibility(View.VISIBLE);                        secQ3.setVisibility(View.VISIBLE);                        lineQ3.setVisibility(View.VISIBLE);                        secQ4.setVisibility(View.VISIBLE);                        lineQ4.setVisibility(View.VISIBLE);                        secQ5.setVisibility(View.VISIBLE);                        lineQ5.setVisibility(View.VISIBLE);                        secQ6.setVisibility(View.VISIBLE);                        lineQ6.setVisibility(View.VISIBLE);                       /* secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                        secQ8a.setVisibility(View.VISIBLE);                        lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                        secBDate.setVisibility(View.VISIBLE);                        lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);*/                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ2=(LinearLayout)findViewById(R.id.secQ2);            lineQ2=(View)findViewById(R.id.lineQ2);            VlblQ2 = (TextView) findViewById(R.id.VlblQ2);            rdogrpQ2 = (RadioGroup) findViewById(R.id.rdogrpQ2);            rdoQ21 = (RadioButton) findViewById(R.id.rdoQ21);            rdoQ22 = (RadioButton) findViewById(R.id.rdoQ22);            rdogrpQ2.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ2 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ2.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ2.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ2[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        if(rdoQ21.isChecked()==true && rdoQ31.isChecked()==true && rdoQ41.isChecked()==true && rdoQ51.isChecked()==true && rdoQ61.isChecked()==true)                        {                            secQ7.setVisibility(View.GONE);                            lineQ7.setVisibility(View.GONE);                            rdogrpQ7.clearCheck();                            secQ8.setVisibility(View.GONE);                            lineQ8.setVisibility(View.GONE);                            rdogrpQ8.clearCheck();                            secQ8a.setVisibility(View.GONE);                            lineQ8a.setVisibility(View.GONE);                            txtQ8a.setText("");                            secQ9.setVisibility(View.GONE);                            lineQ9.setVisibility(View.GONE);                            rdogrpQ9.clearCheck();                            secBDate.setVisibility(View.GONE);                            lineBDate.setVisibility(View.GONE);                            dtpBDate.setText("");                            secQ9a.setVisibility(View.GONE);                            lineQ9a.setVisibility(View.GONE);                            rdogrpQ9a.clearCheck();                            secQ10.setVisibility(View.GONE);                            lineQ10.setVisibility(View.GONE);                            rdogrpQ10.clearCheck();                            secQ10a.setVisibility(View.GONE);                            lineQ10a.setVisibility(View.GONE);                            rdogrpQ10a.clearCheck();                            secQ11.setVisibility(View.GONE);                            lineQ11.setVisibility(View.GONE);                            rdogrpQ11.clearCheck();                            seclbl8.setVisibility(View.GONE);                            seclbl81.setVisibility(View.GONE);                        }                    }                    else                    {                        secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                      //  secQ8a.setVisibility(View.VISIBLE);                      //  lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                      //  secBDate.setVisibility(View.VISIBLE);                      //  lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ3=(LinearLayout)findViewById(R.id.secQ3);            lineQ3=(View)findViewById(R.id.lineQ3);            VlblQ3 = (TextView) findViewById(R.id.VlblQ3);            rdogrpQ3 = (RadioGroup) findViewById(R.id.rdogrpQ3);            rdoQ31 = (RadioButton) findViewById(R.id.rdoQ31);            rdoQ32 = (RadioButton) findViewById(R.id.rdoQ32);            rdogrpQ3.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ3 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ3.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ3.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ3[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        if(rdoQ21.isChecked()==true && rdoQ31.isChecked()==true && rdoQ41.isChecked()==true && rdoQ51.isChecked()==true && rdoQ61.isChecked()==true)                        {                            secQ7.setVisibility(View.GONE);                            lineQ7.setVisibility(View.GONE);                            rdogrpQ7.clearCheck();                            secQ8.setVisibility(View.GONE);                            lineQ8.setVisibility(View.GONE);                            rdogrpQ8.clearCheck();                            secQ8a.setVisibility(View.GONE);                            lineQ8a.setVisibility(View.GONE);                            txtQ8a.setText("");                            secQ9.setVisibility(View.GONE);                            lineQ9.setVisibility(View.GONE);                            rdogrpQ9.clearCheck();                            secBDate.setVisibility(View.GONE);                            lineBDate.setVisibility(View.GONE);                            dtpBDate.setText("");                            secQ9a.setVisibility(View.GONE);                            lineQ9a.setVisibility(View.GONE);                            rdogrpQ9a.clearCheck();                            secQ10.setVisibility(View.GONE);                            lineQ10.setVisibility(View.GONE);                            rdogrpQ10.clearCheck();                            secQ10a.setVisibility(View.GONE);                            lineQ10a.setVisibility(View.GONE);                            rdogrpQ10a.clearCheck();                            secQ11.setVisibility(View.GONE);                            lineQ11.setVisibility(View.GONE);                            rdogrpQ11.clearCheck();                            seclbl8.setVisibility(View.GONE);                            seclbl81.setVisibility(View.GONE);                        }                    }                    else                    {                        secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                      //  secQ8a.setVisibility(View.VISIBLE);                      //  lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                      //  secBDate.setVisibility(View.VISIBLE);                      //  lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ4=(LinearLayout)findViewById(R.id.secQ4);            lineQ4=(View)findViewById(R.id.lineQ4);            VlblQ4 = (TextView) findViewById(R.id.VlblQ4);            rdogrpQ4 = (RadioGroup) findViewById(R.id.rdogrpQ4);            rdoQ41 = (RadioButton) findViewById(R.id.rdoQ41);            rdoQ42 = (RadioButton) findViewById(R.id.rdoQ42);            rdogrpQ4.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ4 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ4.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ4.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ4[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        if(rdoQ21.isChecked()==true && rdoQ31.isChecked()==true && rdoQ41.isChecked()==true && rdoQ51.isChecked()==true && rdoQ61.isChecked()==true)                        {                            secQ7.setVisibility(View.GONE);                            lineQ7.setVisibility(View.GONE);                            rdogrpQ7.clearCheck();                            secQ8.setVisibility(View.GONE);                            lineQ8.setVisibility(View.GONE);                            rdogrpQ8.clearCheck();                            secQ8a.setVisibility(View.GONE);                            lineQ8a.setVisibility(View.GONE);                            txtQ8a.setText("");                            secQ9.setVisibility(View.GONE);                            lineQ9.setVisibility(View.GONE);                            rdogrpQ9.clearCheck();                            secBDate.setVisibility(View.GONE);                            lineBDate.setVisibility(View.GONE);                            dtpBDate.setText("");                            secQ9a.setVisibility(View.GONE);                            lineQ9a.setVisibility(View.GONE);                            rdogrpQ9a.clearCheck();                            secQ10.setVisibility(View.GONE);                            lineQ10.setVisibility(View.GONE);                            rdogrpQ10.clearCheck();                            secQ10a.setVisibility(View.GONE);                            lineQ10a.setVisibility(View.GONE);                            rdogrpQ10a.clearCheck();                            secQ11.setVisibility(View.GONE);                            lineQ11.setVisibility(View.GONE);                            rdogrpQ11.clearCheck();                            seclbl8.setVisibility(View.GONE);                            seclbl81.setVisibility(View.GONE);                        }                    }                    else                    {                        secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                    //    secQ8a.setVisibility(View.VISIBLE);                      //  lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                      //  secBDate.setVisibility(View.VISIBLE);                      //  lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ5=(LinearLayout)findViewById(R.id.secQ5);            lineQ5=(View)findViewById(R.id.lineQ5);            VlblQ5 = (TextView) findViewById(R.id.VlblQ5);            rdogrpQ5 = (RadioGroup) findViewById(R.id.rdogrpQ5);            rdoQ51 = (RadioButton) findViewById(R.id.rdoQ51);            rdoQ52 = (RadioButton) findViewById(R.id.rdoQ52);            rdogrpQ5.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ5 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ5.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ5.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ5[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        if(rdoQ21.isChecked()==true && rdoQ31.isChecked()==true && rdoQ41.isChecked()==true && rdoQ51.isChecked()==true && rdoQ61.isChecked()==true)                        {                            secQ7.setVisibility(View.GONE);                            lineQ7.setVisibility(View.GONE);                            rdogrpQ7.clearCheck();                            secQ8.setVisibility(View.GONE);                            lineQ8.setVisibility(View.GONE);                            rdogrpQ8.clearCheck();                            secQ8a.setVisibility(View.GONE);                            lineQ8a.setVisibility(View.GONE);                            txtQ8a.setText("");                            secQ9.setVisibility(View.GONE);                            lineQ9.setVisibility(View.GONE);                            rdogrpQ9.clearCheck();                            secBDate.setVisibility(View.GONE);                            lineBDate.setVisibility(View.GONE);                            dtpBDate.setText("");                            secQ9a.setVisibility(View.GONE);                            lineQ9a.setVisibility(View.GONE);                            rdogrpQ9a.clearCheck();                            secQ10.setVisibility(View.GONE);                            lineQ10.setVisibility(View.GONE);                            rdogrpQ10.clearCheck();                            secQ10a.setVisibility(View.GONE);                            lineQ10a.setVisibility(View.GONE);                            rdogrpQ10a.clearCheck();                            secQ11.setVisibility(View.GONE);                            lineQ11.setVisibility(View.GONE);                            rdogrpQ11.clearCheck();                            seclbl8.setVisibility(View.GONE);                            seclbl81.setVisibility(View.GONE);                        }                    }                    else                    {                        secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                     //   secQ8a.setVisibility(View.VISIBLE);                     //   lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                     //   secBDate.setVisibility(View.VISIBLE);                      //  lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ6=(LinearLayout)findViewById(R.id.secQ6);            lineQ6=(View)findViewById(R.id.lineQ6);            VlblQ6 = (TextView) findViewById(R.id.VlblQ6);            rdogrpQ6 = (RadioGroup) findViewById(R.id.rdogrpQ6);            rdoQ61 = (RadioButton) findViewById(R.id.rdoQ61);            rdoQ62 = (RadioButton) findViewById(R.id.rdoQ62);            rdogrpQ6.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ6 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ6.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ6.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ6[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        if(rdoQ21.isChecked()==true && rdoQ31.isChecked()==true && rdoQ41.isChecked()==true && rdoQ51.isChecked()==true && rdoQ61.isChecked()==true)                        {                            secQ7.setVisibility(View.GONE);                            lineQ7.setVisibility(View.GONE);                            rdogrpQ7.clearCheck();                            secQ8.setVisibility(View.GONE);                            lineQ8.setVisibility(View.GONE);                            rdogrpQ8.clearCheck();                            secQ8a.setVisibility(View.GONE);                            lineQ8a.setVisibility(View.GONE);                            txtQ8a.setText("");                            secQ9.setVisibility(View.GONE);                            lineQ9.setVisibility(View.GONE);                            rdogrpQ9.clearCheck();                            secBDate.setVisibility(View.GONE);                            lineBDate.setVisibility(View.GONE);                            dtpBDate.setText("");                            secQ9a.setVisibility(View.GONE);                            lineQ9a.setVisibility(View.GONE);                            rdogrpQ9a.clearCheck();                            secQ10.setVisibility(View.GONE);                            lineQ10.setVisibility(View.GONE);                            rdogrpQ10.clearCheck();                            secQ10a.setVisibility(View.GONE);                            lineQ10a.setVisibility(View.GONE);                            rdogrpQ10a.clearCheck();                            secQ11.setVisibility(View.GONE);                            lineQ11.setVisibility(View.GONE);                            rdogrpQ11.clearCheck();                            seclbl8.setVisibility(View.GONE);                            seclbl81.setVisibility(View.GONE);                        }                    }                    else                    {                        secQ7.setVisibility(View.VISIBLE);                        lineQ7.setVisibility(View.VISIBLE);                        secQ8.setVisibility(View.VISIBLE);                        lineQ8.setVisibility(View.VISIBLE);                     //   secQ8a.setVisibility(View.VISIBLE);                     //   lineQ8a.setVisibility(View.VISIBLE);                        secQ9.setVisibility(View.VISIBLE);                        lineQ9.setVisibility(View.VISIBLE);                     //   secBDate.setVisibility(View.VISIBLE);                      //  lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        secQ10.setVisibility(View.VISIBLE);                        lineQ10.setVisibility(View.VISIBLE);                        secQ10a.setVisibility(View.VISIBLE);                        lineQ10a.setVisibility(View.VISIBLE);                        secQ11.setVisibility(View.VISIBLE);                        lineQ11.setVisibility(View.VISIBLE);                        seclbl8.setVisibility(View.VISIBLE);                        seclbl81.setVisibility(View.VISIBLE);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ7=(LinearLayout)findViewById(R.id.secQ7);            lineQ7=(View)findViewById(R.id.lineQ7);            VlblQ7 = (TextView) findViewById(R.id.VlblQ7);            rdogrpQ7 = (RadioGroup) findViewById(R.id.rdogrpQ7);            rdoQ71 = (RadioButton) findViewById(R.id.rdoQ71);            rdoQ72 = (RadioButton) findViewById(R.id.rdoQ72);            rdogrpQ7.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ7 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ7.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ7.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ7[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        rdoQ10a1.setChecked(true);                    }                    else                    {                        if(rdoQ71.isChecked()==false && rdoQ81.isChecked()==false && rdoQ91.isChecked()==false && rdoQ101.isChecked()==false)                        {                            rdoQ10a2.setChecked(true);                        }                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ8=(LinearLayout)findViewById(R.id.secQ8);            lineQ8=(View)findViewById(R.id.lineQ8);            VlblQ8 = (TextView) findViewById(R.id.VlblQ8);            rdogrpQ8 = (RadioGroup) findViewById(R.id.rdogrpQ8);            rdoQ81 = (RadioButton) findViewById(R.id.rdoQ81);            rdoQ82 = (RadioButton) findViewById(R.id.rdoQ82);            rdogrpQ8.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ8 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ8.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ8.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ8[i];                    }                    if(rbData.equalsIgnoreCase("0"))                    {                        secQ8a.setVisibility(View.GONE);                        lineQ8a.setVisibility(View.GONE);                        txtQ8a.setText("");                        if(rdoQ71.isChecked()==false && rdoQ81.isChecked()==false && rdoQ91.isChecked()==false && rdoQ101.isChecked()==false)                        {                            rdoQ10a2.setChecked(true);                        }                    }                    else                    {                        secQ8a.setVisibility(View.VISIBLE);                        lineQ8a.setVisibility(View.VISIBLE);                        rdoQ10a1.setChecked(true);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ8a=(LinearLayout)findViewById(R.id.secQ8a);            lineQ8a=(View)findViewById(R.id.lineQ8a);            VlblQ8a=(TextView) findViewById(R.id.VlblQ8a);            txtQ8a=(EditText) findViewById(R.id.txtQ8a);            secQ9=(LinearLayout)findViewById(R.id.secQ9);            lineQ9=(View)findViewById(R.id.lineQ9);            VlblQ9 = (TextView) findViewById(R.id.VlblQ9);            rdogrpQ9 = (RadioGroup) findViewById(R.id.rdogrpQ9);            rdoQ91 = (RadioButton) findViewById(R.id.rdoQ91);            rdoQ92 = (RadioButton) findViewById(R.id.rdoQ92);            rdogrpQ9.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ9 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ9.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ9.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ9[i];                    }                    if(rbData.equalsIgnoreCase("0"))                    {                        secBDate.setVisibility(View.GONE);                        lineBDate.setVisibility(View.GONE);                        dtpBDate.setText("");                        secQ9a.setVisibility(View.GONE);                        lineQ9a.setVisibility(View.GONE);                        rdogrpQ9a.clearCheck();                        if(rdoQ71.isChecked()==false && rdoQ81.isChecked()==false && rdoQ91.isChecked()==false && rdoQ101.isChecked()==false)                        {                            rdoQ10a2.setChecked(true);                        }                    }                    else                    {                        secBDate.setVisibility(View.VISIBLE);                        lineBDate.setVisibility(View.VISIBLE);                        secQ9a.setVisibility(View.VISIBLE);                        lineQ9a.setVisibility(View.VISIBLE);                        rdoQ10a1.setChecked(true);                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secBDate=(LinearLayout)findViewById(R.id.secBDate);            lineBDate=(View)findViewById(R.id.lineBDate);            VlblBDate=(TextView) findViewById(R.id.VlblBDate);            dtpBDate=(EditText) findViewById(R.id.dtpBDate);            secQ9a=(LinearLayout)findViewById(R.id.secQ9a);            lineQ9a=(View)findViewById(R.id.lineQ9a);            VlblQ9a = (TextView) findViewById(R.id.VlblQ9a);            rdogrpQ9a = (RadioGroup) findViewById(R.id.rdogrpQ9a);            rdoQ9a1 = (RadioButton) findViewById(R.id.rdoQ9a1);            rdoQ9a2 = (RadioButton) findViewById(R.id.rdoQ9a2);            rdoQ9a3 = (RadioButton) findViewById(R.id.rdoQ9a3);            rdoQ9a4 = (RadioButton) findViewById(R.id.rdoQ9a4);            secQ10=(LinearLayout)findViewById(R.id.secQ10);            lineQ10=(View)findViewById(R.id.lineQ10);            VlblQ10 = (TextView) findViewById(R.id.VlblQ10);            rdogrpQ10 = (RadioGroup) findViewById(R.id.rdogrpQ10);            rdoQ101 = (RadioButton) findViewById(R.id.rdoQ101);            rdoQ102 = (RadioButton) findViewById(R.id.rdoQ102);            rdogrpQ10.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){                @Override                public void onCheckedChanged(RadioGroup radioGroup,int radioButtonID) {                    String rbData = "";                    RadioButton rb;                    String[] d_rdogrpQ10 = new String[] {"1","0"};                    for (int i = 0; i < rdogrpQ10.getChildCount(); i++)                    {                        rb = (RadioButton)rdogrpQ10.getChildAt(i);                        if (rb.isChecked()) rbData = d_rdogrpQ10[i];                    }                    if(rbData.equalsIgnoreCase("1"))                    {                        rdoQ10a1.setChecked(true);                    }                    else                    {                        if(rdoQ71.isChecked()==false && rdoQ81.isChecked()==false && rdoQ91.isChecked()==false && rdoQ101.isChecked()==false)                        {                            rdoQ10a2.setChecked(true);                        }                    }                }                public void onNothingSelected(AdapterView<?> adapterView) {                    return;                }            });            secQ10a=(LinearLayout)findViewById(R.id.secQ10a);            lineQ10a=(View)findViewById(R.id.lineQ10a);            VlblQ10a = (TextView) findViewById(R.id.VlblQ10a);            rdogrpQ10a = (RadioGroup) findViewById(R.id.rdogrpQ10a);            rdoQ10a1 = (RadioButton) findViewById(R.id.rdoQ10a1);            rdoQ10a2 = (RadioButton) findViewById(R.id.rdoQ10a2);            seclbl8=(LinearLayout)findViewById(R.id.seclbl8);            secQ11=(LinearLayout)findViewById(R.id.secQ11);            lineQ11=(View)findViewById(R.id.lineQ11);            VlblQ11 = (TextView) findViewById(R.id.VlblQ11);            rdogrpQ11 = (RadioGroup) findViewById(R.id.rdogrpQ11);            rdoQ111 = (RadioButton) findViewById(R.id.rdoQ111);            rdoQ112 = (RadioButton) findViewById(R.id.rdoQ112);            secComments=(LinearLayout)findViewById(R.id.secComments);            lineComments=(View)findViewById(R.id.lineComments);            VlblComments=(TextView) findViewById(R.id.VlblComments);            txtComments=(EditText) findViewById(R.id.txtComments);            dtpVDate.setOnTouchListener(new View.OnTouchListener() {                @Override                public boolean onTouch(View v, MotionEvent event) {                    final int DRAWABLE_RIGHT  = 2;                    if(event.getAction() == MotionEvent.ACTION_UP) {                        if(event.getRawX() >= (dtpVDate.getRight() - dtpVDate.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {                            VariableID = "btnVDate"; showDialog(DATE_DIALOG);                            return true;                        }                    }                    return false;                }            });            dtpBDate.setOnTouchListener(new View.OnTouchListener() {                @Override                public boolean onTouch(View v, MotionEvent event) {                    final int DRAWABLE_RIGHT  = 2;                    if(event.getAction() == MotionEvent.ACTION_UP) {                        if(event.getRawX() >= (dtpBDate.getRight() - dtpBDate.getCompoundDrawables()[DRAWABLE_RIGHT].getBounds().width())) {                            VariableID = "btnBDate"; showDialog(DATE_DIALOG);                            return true;                        }                    }                    return false;                }            });            //Hide all skip variables            secQ2.setVisibility(View.GONE);            secQ3.setVisibility(View.GONE);            secQ4.setVisibility(View.GONE);            secQ5.setVisibility(View.GONE);            secQ6.setVisibility(View.GONE);            secQ7.setVisibility(View.GONE);            secQ8.setVisibility(View.GONE);            secQ8a.setVisibility(View.GONE);            secQ9.setVisibility(View.GONE);            secBDate.setVisibility(View.GONE);            secQ9a.setVisibility(View.GONE);            secQ10.setVisibility(View.GONE);            secQ10a.setVisibility(View.GONE);            secQ11.setVisibility(View.GONE);            secQ8a.setVisibility(View.GONE);            secBDate.setVisibility(View.GONE);            secQ9a.setVisibility(View.GONE);            seclbl8.setVisibility(View.GONE);            seclbl81.setVisibility(View.GONE);            txtHHDist.setEnabled(false);            txtHHUpz.setEnabled(false);            txtHHVill.setEnabled(false);            txtHHUn.setEnabled(false);            txtWRUn.setEnabled(false);            txtWRVill.setEnabled(false);            txtHHNo.setEnabled(false);            rdoQ10a1.setEnabled(false);            rdoQ10a2.setEnabled(false);            if(RND.length()==0)            {                RND="1";            }            txtRnd.setText(RND);            txtScreeningID.setText(SCREENINGID);            dtpVDate.setText(Global.DateNowDMY());            if(txtScreeningID.getText().toString().trim().length()>=12)            {                spnDist.setEnabled(false);                spnUpz.setEnabled(false);                spnUn.setEnabled(false);                spnVill.setEnabled(false);                txtWRHHNo.setEnabled(false);            }            txtRnd.setEnabled(false);            txtScreeningID.setEnabled(false);            DataSearch(RND,SCREENINGID);            Button cmdSave = (Button) findViewById(R.id.cmdSave);            cmdSave.setOnClickListener(new View.OnClickListener() {                public void onClick(View v) {                    DataSave();                }});        }        catch(Exception  e)        {            Connection.MessageBox(Screening.this, e.getMessage());            return;        }    }    private void DataSave()    {        try        {            String DV="";            if(txtRnd.getText().toString().length()==0 & secRnd.isShown())            {                Connection.MessageBox(Screening.this, "Required field: রাউন্ড নাম্বার.");                txtRnd.requestFocus();                return;            }            else if(Integer.valueOf(txtRnd.getText().toString().length()==0 ? "1" : txtRnd.getText().toString()) < 1 || Integer.valueOf(txtRnd.getText().toString().length()==0 ? "5" : txtRnd.getText().toString()) > 5)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 5(রাউন্ড নাম্বার).");                txtRnd.requestFocus();                return;            }            else if(spnDist.getSelectedItemPosition()==0  & secDist.isShown())            {                Connection.MessageBox(Screening.this, "Required field: জেলা.");                spnDist.requestFocus();                return;            }            else if(spnUpz.getSelectedItemPosition()==0  & secUpz.isShown())            {                Connection.MessageBox(Screening.this, "Required field: উপজেলা.");                spnUpz.requestFocus();                return;            }            else if(spnUn.getSelectedItemPosition()==0  & secUn.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ইউনিয়ন.");                spnUn.requestFocus();                return;            }            else if(spnVill.getSelectedItemPosition()==0  & secVill.isShown())            {                Connection.MessageBox(Screening.this, "Required field: গ্রাম.");                spnVill.requestFocus();                return;            }            else if(txtWard.getText().toString().length()==0 & secWard.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ওয়ার্ড নম্বর.");                txtWard.requestFocus();                return;            }            else if(Integer.valueOf(txtWard.getText().toString().length()==0 ? "1" : txtWard.getText().toString()) < 1 || Integer.valueOf(txtWard.getText().toString().length()==0 ? "9" : txtWard.getText().toString()) > 9)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 9(ওয়ার্ড নম্বর).");                txtWard.requestFocus();                return;            }            DV = Global.DateValidate(dtpVDate.getText().toString());            if(DV.length()!=0 & secVDate.isShown())            {                Connection.MessageBox(Screening.this, DV);                dtpVDate.requestFocus();                return;            }           if(Global.DateDifferenceDays(dtpVDate.getText().toString(),"16/10/2016")<0)            {                Connection.MessageBox(Screening.this, "Visit date must be between 17-10-2016 to 20-11-2016");                return;            }           else if(Global.DateDifferenceDays(dtpVDate.getText().toString(),"20/11/2016")>0)           {               Connection.MessageBox(Screening.this, "Visit date must be between 17-10-2016 to 20-11-2016");               return;           }            else if(!rdoImpOrg1.isChecked() & !rdoImpOrg2.isChecked() & !rdoImpOrg3.isChecked() & secImpOrg.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (বাস্তবায়নকারী সংস্থার নাম).");                rdoImpOrg1.requestFocus();                return;            }            else if(!rdoHHType1.isChecked() & !rdoHHType2.isChecked() & secHHType.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (ওয়েলথ র‍্যাংকিং অনুযায়ি খানার ধরন).");                rdoHHType1.requestFocus();                return;            }            else if(txtWRUn.getText().toString().length()==0 & secWRUn.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ওয়েলথ র‍্যাঙ্কিং ইউনিয়ন.");                txtWRUn.requestFocus();                return;            }            else if(Integer.valueOf(txtWRUn.getText().toString().length()==0 ? "1" : txtWRUn.getText().toString()) < 1 || Integer.valueOf(txtWRUn.getText().toString().length()==0 ? "99" : txtWRUn.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(ওয়েলথ র‍্যাঙ্কিং ইউনিয়ন).");                txtWRUn.requestFocus();                return;            }            else if(txtWRVill.getText().toString().length()==0 & secWRVill.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ওয়েলথ র‍্যাঙ্কিং গ্রাম.");                txtWRVill.requestFocus();                return;            }            else if(Integer.valueOf(txtWRVill.getText().toString().length()==0 ? "1" : txtWRVill.getText().toString()) < 1 || Integer.valueOf(txtWRVill.getText().toString().length()==0 ? "99" : txtWRVill.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(ওয়েলথ র‍্যাঙ্কিং গ্রাম).");                txtWRVill.requestFocus();                return;            }            else if(txtWRNo.getText().toString().length()==0 & secWRNo.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ওয়েলথ র‍্যাঙ্কিং নং.");                txtWRNo.requestFocus();                return;            }            else if(Integer.valueOf(txtWRNo.getText().toString().length()==0 ? "1" : txtWRNo.getText().toString()) < 0 || Integer.valueOf(txtWRNo.getText().toString().length()==0 ? "9" : txtWRNo.getText().toString()) > 9)            {                Connection.MessageBox(Screening.this, "Value should be between 0 and 9(ওয়েলথ র‍্যাঙ্কিং নং).");                txtWRNo.requestFocus();                return;            }            else if(txtWRHHNo.getText().toString().length()==0 & secWRHHNo.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ওয়েলথ র‍্যাঙ্কিং খানা.");                txtWRHHNo.requestFocus();                return;            }            else if(Integer.valueOf(txtWRHHNo.getText().toString().length()==0 ? "1" : txtWRHHNo.getText().toString()) < 1 || Integer.valueOf(txtWRHHNo.getText().toString().length()==0 ? "9999" : txtWRHHNo.getText().toString()) > 9999)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 9999(ওয়েলথ র‍্যাঙ্কিং খানা).");                txtWRHHNo.requestFocus();                return;            }            else if(txtHHDist.getText().toString().length()==0 & secHHDist.isShown())            {                Connection.MessageBox(Screening.this, "Required field: জেলা.");                txtHHDist.requestFocus();                return;            }            else if(Integer.valueOf(txtHHDist.getText().toString().length()==0 ? "1" : txtHHDist.getText().toString()) < 1 || Integer.valueOf(txtHHDist.getText().toString().length()==0 ? "99" : txtHHDist.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(জেলা).");                txtHHDist.requestFocus();                return;            }            else if(txtHHUpz.getText().toString().length()==0 & secHHUpz.isShown())            {                Connection.MessageBox(Screening.this, "Required field: উপজেলা.");                txtHHUpz.requestFocus();                return;            }            else if(Integer.valueOf(txtHHUpz.getText().toString().length()==0 ? "1" : txtHHUpz.getText().toString()) < 1 || Integer.valueOf(txtHHUpz.getText().toString().length()==0 ? "99" : txtHHUpz.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(উপজেলা).");                txtHHUpz.requestFocus();                return;            }            else if(txtHHUn.getText().toString().length()==0 & secHHUn.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ইউনিয়ন.");                txtHHUn.requestFocus();                return;            }            else if(Integer.valueOf(txtHHUn.getText().toString().length()==0 ? "1" : txtHHUn.getText().toString()) < 1 || Integer.valueOf(txtHHUn.getText().toString().length()==0 ? "99" : txtHHUn.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(ইউনিয়ন).");                txtHHUn.requestFocus();                return;            }            else if(txtHHVill.getText().toString().length()==0 & secHHVill.isShown())            {                Connection.MessageBox(Screening.this, "Required field: গ্রাম.");                txtHHVill.requestFocus();                return;            }            else if(Integer.valueOf(txtHHVill.getText().toString().length()==0 ? "1" : txtHHVill.getText().toString()) < 1 || Integer.valueOf(txtHHVill.getText().toString().length()==0 ? "99" : txtHHVill.getText().toString()) > 99)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 99(গ্রাম).");                txtHHVill.requestFocus();                return;            }            else if(txtScreeningID.getText().toString().length()==0 & secScreeningID.isShown())            {                Connection.MessageBox(Screening.this, "Required field: .");                txtScreeningID.requestFocus();                return;            }            else if(txtBenName.getText().toString().length()==0 & secBenName.isShown())            {                Connection.MessageBox(Screening.this, "Required field: উপকারভোগীর নাম.");                txtBenName.requestFocus();                return;            }            else if(txtHeadName.getText().toString().length()==0 & secHeadName.isShown())            {                Connection.MessageBox(Screening.this, "Required field: খানা প্রধানের নাম.");                txtHeadName.requestFocus();                return;            }            else if(txtFName.getText().toString().length()==0 & secFName.isShown() & txtHsuName.getText().toString().length()==0 & secHsuName.isShown())            {                Connection.MessageBox(Screening.this, "Required field: পিতা/শ্বশুর/স্বামীর  এর নাম.");                txtFName.requestFocus();                return;            }            else if(txtMobNo.getText().toString().length()==0 & secMobNo.isShown()& txtReqMobNo.getText().toString().length()==0 & secReqMobNo.isShown())            {                Connection.MessageBox(Screening.this, "Required field: নিজের/পরিবারের/প্রতিবেশীর মোবাইল নাম্বার.");                txtMobNo.requestFocus();                return;            }            else if(txtMobNo.getText().toString().length()>0 & txtMobNo.getText().toString().length()!=11)            {                Connection.MessageBox(Screening.this, "Invalid mobile number");                txtMobNo.requestFocus();                return;            }            else if(txtReqMobNo.getText().toString().length()>0 & txtReqMobNo.getText().toString().length()!=11)            {                Connection.MessageBox(Screening.this, "Value should be 11 digit.");                txtReqMobNo.requestFocus();                return;            }            if(txtMobNo.getText().toString().length()>0)            {                if(txtMobNo.getText().toString().length()==11 &&(txtMobNo.getText().toString().substring(0,3).equals("015") || txtMobNo.getText().toString().substring(0,3).equals("016") || txtMobNo.getText().toString().substring(0,3).equals("017") || txtMobNo.getText().toString().substring(0,3).equals("018") || txtMobNo.getText().toString().substring(0,3).equals("019")))                {                }                else                {                    Connection.MessageBox(Screening.this, "Invalid mobile number");                    txtMobNo.requestFocus();                    return;                }            }            if(txtReqMobNo.getText().toString().length()>0)            {                if(txtReqMobNo.getText().toString().length()==11 &&(txtReqMobNo.getText().toString().substring(0,3).equals("015") || txtReqMobNo.getText().toString().substring(0,3).equals("016") || txtReqMobNo.getText().toString().substring(0,3).equals("017") || txtReqMobNo.getText().toString().substring(0,3).equals("018") || txtReqMobNo.getText().toString().substring(0,3).equals("019")))                {                }                else                {                    Connection.MessageBox(Screening.this, "Invalid mobile number");                    txtReqMobNo.requestFocus();                    return;                }            }            if(txtHHLocation.getText().toString().length()==0 & secHHLocation.isShown())            {                Connection.MessageBox(Screening.this, "Required field: খানার অবস্থান.");                txtHHLocation.requestFocus();                return;            }            else if(txtResName.getText().toString().length()==0 & secResName.isShown())            {                Connection.MessageBox(Screening.this, "Required field: তথ্যদাতার নাম.");                txtResName.requestFocus();                return;            }            else if(spnRelation.getSelectedItemPosition()==0  & secRelation.isShown())            {                Connection.MessageBox(Screening.this, "Required field: উপকারভোগীর সাথে তথ্যদাতার সম্পর্ক.");                spnRelation.requestFocus();                return;            }            else if(!rdoQ11.isChecked() & !rdoQ12.isChecked() & secQ1.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (১. আপনার পরিবারের কোন সদস্য বর্তমানে কোন জীবিকায়ন, খাদ্য নিরাপত্তা বা সম্পদ হস্তান্তর বিষয়ক কোন উন্নয়ন প্রকল্পের সাথে জড়িত আছে কি? (সম্পদ পেয়েছে কিংবা পাবে)).");                rdoQ11.requestFocus();                return;            }            else if(!rdoQ21.isChecked() & !rdoQ22.isChecked() & secQ2.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (২.  সারা বছর ব্যাপী পরিবারের সকল সদস্যদের জন্য পর্যাপ্ত (৩ বেলা পেটভরে) খাবারের সুযোগ বা নিশ্চয়তা আছে কি?).");                rdoQ21.requestFocus();                return;            }            else if(!rdoQ31.isChecked() & !rdoQ32.isChecked() & secQ3.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৩. আপনার পরিবারের মাসিক আয় ৭,৫০০ টাকা বা তার বেশী কি?   ).");                rdoQ31.requestFocus();                return;            }            else if(!rdoQ41.isChecked() & !rdoQ42.isChecked() & secQ4.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৪. আপনার পরিবারে উৎপাদনশীল সম্পদের মূল্য ১৫,০০০ টাকা বা তার বেশী কি? (জমি, পুকুর বা জলাশয় ও বসতভিটা ব্যতীত) ).");                rdoQ41.requestFocus();                return;            }            else if(!rdoQ51.isChecked() & !rdoQ52.isChecked() & secQ5.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৫. আপনার নিজস্ব বসতভিটা জমির পরিমান ১০ ডেসিমেল বা তার বেশী কি?).");                rdoQ51.requestFocus();                return;            }            else if(!rdoQ61.isChecked() & !rdoQ62.isChecked() & secQ6.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৬. আপনার নিজস্ব আবাদি জমির পরিমান ৫০ ডেসিমেল বা তার বেশী কি?(বসতভিটা ও পুকুর ব্যতীত)).");                rdoQ61.requestFocus();                return;            }            else if(!rdoQ71.isChecked() & !rdoQ72.isChecked() & secQ7.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৭. আপনার পরিবারে ১৫-৪৫ বছর বয়সী কোন বিবাহিত নারী আছে কি?).");                rdoQ71.requestFocus();                return;            }            else if(!rdoQ81.isChecked() & !rdoQ82.isChecked() & secQ8.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৮. আপনার পরিবারে গর্ভবতী নারী (স্বামী পরিত্যক্তা অথবা বিধবাসহ) আছে কি?).");                rdoQ81.requestFocus();                return;            }            else if(txtQ8a.getText().toString().length()==0 & secQ8a.isShown())            {                Connection.MessageBox(Screening.this, "Required field: ‘হ্যাঁ’হলে কত মাসের গর্ভবতী?.");                txtQ8a.requestFocus();                return;            }            else if(Integer.valueOf(txtQ8a.getText().toString().length()==0 ? "1" : txtQ8a.getText().toString()) < 1 || Integer.valueOf(txtQ8a.getText().toString().length()==0 ? "10" : txtQ8a.getText().toString()) > 10)            {                Connection.MessageBox(Screening.this, "Value should be between 1 and 10(‘হ্যাঁ’হলে কত মাসের গর্ভবতী?).");                txtQ8a.requestFocus();                return;            }            else if(!rdoQ91.isChecked() & !rdoQ92.isChecked() & secQ9.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (৯. আপনার পরিবারে ০-২৩ মাস বয়সী শিশু (প্রতিবন্ধীসহ) আছে কি?).");                rdoQ91.requestFocus();                return;            }            if (dtpBDate.getText().toString().length() != 0) {                Integer ageofChild = Global.DateDifferenceMonth(Global.DateNowDMY(), dtpBDate.getText().toString());                if (ageofChild > 23) {                    Connection.MessageBox(Screening.this, "শিশুর বয়স " + ageofChild.toString() + " মাস, শিশুর বয়স অবস্যাই ২৩ মাসের মধ্যে হতে হবে.");                    dtpBDate.requestFocus();                    return;                }            }            DV = Global.DateValidate(dtpBDate.getText().toString());            if(DV.length()!=0 & secBDate.isShown())            {                Connection.MessageBox(Screening.this, DV);                dtpBDate.requestFocus();                return;            }            else if(!rdoQ9a1.isChecked() & !rdoQ9a2.isChecked() & !rdoQ9a3.isChecked() & !rdoQ9a4.isChecked() & secQ9a.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (যদি প্রতিবন্ধী শিশু থাকে তাহলে প্রতিবন্ধিতার ধরণ উল্লেখ করুন).");                rdoQ9a1.requestFocus();                return;            }            else if(!rdoQ101.isChecked() & !rdoQ102.isChecked() & secQ10.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (১০. আপনার পরিবারে ১৫-১৯ বছর বয়সী কিশোরী আছে কি?).");                rdoQ101.requestFocus();                return;            }            else if(!rdoQ10a1.isChecked() & !rdoQ10a2.isChecked() & secQ10a.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (উপকারভোগী).");                rdoQ10a1.requestFocus();                return;            }            else if(!rdoQ111.isChecked() & !rdoQ112.isChecked() & secQ11.isShown())            {                Connection.MessageBox(Screening.this, "Select anyone options from (১১. আপনার পরিবারে ১৫-১৯ বছর বয়সী কিশোর আছে কি? ).");                rdoQ111.requestFocus();                return;            }            String SQL = "";            RadioButton rb;            Screening_DataModel objSave = new Screening_DataModel();            objSave.setRnd(txtRnd.getText().toString());            objSave.setDist((spnDist.getSelectedItemPosition() == 0 ? "" : Connection.SelectedSpinnerValue(spnDist.getSelectedItem().toString(), "-")));            objSave.setUpz((spnUpz.getSelectedItemPosition() == 0 ? "" : Connection.SelectedSpinnerValue(spnUpz.getSelectedItem().toString(), "-")));            objSave.setUn((spnUn.getSelectedItemPosition() == 0 ? "" : Connection.SelectedSpinnerValue(spnUn.getSelectedItem().toString(), "-")));            objSave.setVill((spnVill.getSelectedItemPosition() == 0 ? "" : Connection.SelectedSpinnerValue(spnVill.getSelectedItem().toString(), "-")));            objSave.setWard(txtWard.getText().toString());            objSave.setVDate(dtpVDate.getText().toString().length() > 0 ? Global.DateConvertYMD(dtpVDate.getText().toString()) : dtpVDate.getText().toString());            String[] d_rdogrpImpOrg = new String[] {"1","2","3"};            objSave.setImpOrg("");            for (int i = 0; i < rdogrpImpOrg.getChildCount(); i++)            {                rb = (RadioButton)rdogrpImpOrg.getChildAt(i);                if (rb.isChecked()) objSave.setImpOrg(d_rdogrpImpOrg[i]);            }            String[] d_rdogrpHHType = new String[] {"1","2"};            objSave.setHHType("");            for (int i = 0; i < rdogrpHHType.getChildCount(); i++)            {                rb = (RadioButton)rdogrpHHType.getChildAt(i);                if (rb.isChecked()) objSave.setHHType(d_rdogrpHHType[i]);            }            objSave.setWRUn(txtWRUn.getText().toString());            objSave.setWRVill(txtWRVill.getText().toString());            objSave.setWRNo(txtWRNo.getText().toString());            objSave.setWRHHNo(txtWRHHNo.getText().toString());            objSave.setHHDist(txtHHDist.getText().toString());            objSave.setHHUpz(txtHHUpz.getText().toString());            objSave.setHHUn(txtHHUn.getText().toString());            objSave.setHHVill(txtHHVill.getText().toString());            objSave.setHHNo(txtHHNo.getText().toString());            objSave.setScreeningID(txtScreeningID.getText().toString());            objSave.setBenName(txtBenName.getText().toString());            objSave.setHeadName(txtHeadName.getText().toString());            objSave.setFName(txtFName.getText().toString());            objSave.setHsuName(txtHsuName.getText().toString());            objSave.setMobNo(txtMobNo.getText().toString());            objSave.setReqMobNo(txtReqMobNo.getText().toString());            objSave.setHHLocation(txtHHLocation.getText().toString());            objSave.setResName(txtResName.getText().toString());            objSave.setRelation((spnRelation.getSelectedItemPosition() == 0 ? "" : Connection.SelectedSpinnerValue(spnRelation.getSelectedItem().toString(), "-")));            String[] d_rdogrpQ1 = new String[] {"1","0"};            objSave.setQ1("");            for (int i = 0; i < rdogrpQ1.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ1.getChildAt(i);                if (rb.isChecked()) objSave.setQ1(d_rdogrpQ1[i]);            }            String[] d_rdogrpQ2 = new String[] {"1","0"};            objSave.setQ2("");            for (int i = 0; i < rdogrpQ2.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ2.getChildAt(i);                if (rb.isChecked()) objSave.setQ2(d_rdogrpQ2[i]);            }            String[] d_rdogrpQ3 = new String[] {"1","0"};            objSave.setQ3("");            for (int i = 0; i < rdogrpQ3.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ3.getChildAt(i);                if (rb.isChecked()) objSave.setQ3(d_rdogrpQ3[i]);            }            String[] d_rdogrpQ4 = new String[] {"1","0"};            objSave.setQ4("");            for (int i = 0; i < rdogrpQ4.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ4.getChildAt(i);                if (rb.isChecked()) objSave.setQ4(d_rdogrpQ4[i]);            }            String[] d_rdogrpQ5 = new String[] {"1","0"};            objSave.setQ5("");            for (int i = 0; i < rdogrpQ5.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ5.getChildAt(i);                if (rb.isChecked()) objSave.setQ5(d_rdogrpQ5[i]);            }            String[] d_rdogrpQ6 = new String[] {"1","0"};            objSave.setQ6("");            for (int i = 0; i < rdogrpQ6.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ6.getChildAt(i);                if (rb.isChecked()) objSave.setQ6(d_rdogrpQ6[i]);            }            String[] d_rdogrpQ7 = new String[] {"1","0"};            objSave.setQ7("");            for (int i = 0; i < rdogrpQ7.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ7.getChildAt(i);                if (rb.isChecked()) objSave.setQ7(d_rdogrpQ7[i]);            }            String[] d_rdogrpQ8 = new String[] {"1","0"};            objSave.setQ8("");            for (int i = 0; i < rdogrpQ8.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ8.getChildAt(i);                if (rb.isChecked()) objSave.setQ8(d_rdogrpQ8[i]);            }            objSave.setQ8a(txtQ8a.getText().toString());            String[] d_rdogrpQ9 = new String[] {"1","0"};            objSave.setQ9("");            for (int i = 0; i < rdogrpQ9.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ9.getChildAt(i);                if (rb.isChecked()) objSave.setQ9(d_rdogrpQ9[i]);            }            objSave.setBDate(dtpBDate.getText().toString().length() > 0 ? Global.DateConvertYMD(dtpBDate.getText().toString()) : dtpBDate.getText().toString());            String[] d_rdogrpQ9a = new String[] {"1","2","3","4"};            objSave.setQ9a("");            for (int i = 0; i < rdogrpQ9a.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ9a.getChildAt(i);                if (rb.isChecked()) objSave.setQ9a(d_rdogrpQ9a[i]);            }            String[] d_rdogrpQ10 = new String[] {"1","0"};            objSave.setQ10("");            for (int i = 0; i < rdogrpQ10.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ10.getChildAt(i);                if (rb.isChecked()) objSave.setQ10(d_rdogrpQ10[i]);            }            String[] d_rdogrpQ10a = new String[] {"1","0"};            objSave.setQ10a("");            for (int i = 0; i < rdogrpQ10a.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ10a.getChildAt(i);                if (rb.isChecked()) objSave.setQ10a(d_rdogrpQ10a[i]);            }            String[] d_rdogrpQ11 = new String[] {"1","0"};            objSave.setQ11("");            for (int i = 0; i < rdogrpQ11.getChildCount(); i++)            {                rb = (RadioButton)rdogrpQ11.getChildAt(i);                if (rb.isChecked()) objSave.setQ11(d_rdogrpQ11[i]);            }            objSave.setComments(txtComments.getText().toString());            objSave.setStartTime(StartTime);            objSave.setEndTime(g.CurrentTime24());            objSave.setUserId(g.getDeviceNo());            objSave.setEntryUser(g.getUserId()); //from data entry user list            objSave.setEnDt(Global.DateTimeNowYMDHMS());            //objSave.setLat(Double.toString(currentLatitude));            //objSave.setLon(Double.toString(currentLongitude));            String status = objSave.SaveUpdateData(this);            if(status.length()==0) {                Connection.MessageBox(Screening.this, "Saved Successfully");                Bundle IDBundle = new Bundle();                IDBundle.putString("Rnd", txtRnd.getText().toString());                finish();                startActivity(new Intent(Screening.this, HHIdentity_list.class).putExtras(IDBundle));            }            else{                Connection.MessageBox(Screening.this, status);                return;            }        }        catch(Exception  e)        {            Connection.MessageBox(Screening.this, e.getMessage());            return;        }    }    private void DataSearch(String Rnd, String ScreeningID)    {        try        {            RadioButton rb;            Screening_DataModel d = new Screening_DataModel();            String SQL = "Select * from "+ TableName +"  Where Rnd='"+ Rnd +"' and ScreeningID='"+ ScreeningID +"'";            List<Screening_DataModel> data = d.SelectAll(this, SQL);            for(Screening_DataModel item : data){                txtRnd.setText(item.getRnd());                spnDist.setSelection(Global.SpinnerItemPositionAnyLength(spnDist, item.getDist()));                spnDist.setEnabled(false);                DIS = item.getDist();                spnUpz.setSelection(Global.SpinnerItemPositionAnyLength(spnUpz, item.getUpz()));                spnUpz.setEnabled(false);                UPZ = item.getUpz();                spnUn.setSelection(Global.SpinnerItemPositionAnyLength(spnUn, item.getUn()));                spnUn.setEnabled(false);                UN = item.getUn();                spnVill.setSelection(Global.SpinnerItemPositionAnyLength(spnVill, item.getVill()));                spnVill.setEnabled(false);                VILL = item.getVill();                txtWard.setText(item.getWard());                dtpVDate.setText(item.getVDate().toString().length()==0 ? "" : Global.DateConvertDMY(item.getVDate()));                String[] d_rdogrpImpOrg = new String[] {"1","2","3"};                for (int i = 0; i < d_rdogrpImpOrg.length; i++)                {                    if (item.getImpOrg().equals(String.valueOf(d_rdogrpImpOrg[i])))                    {                        rb = (RadioButton)rdogrpImpOrg.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpHHType = new String[] {"1","2"};                for (int i = 0; i < d_rdogrpHHType.length; i++)                {                    if (item.getHHType().equals(String.valueOf(d_rdogrpHHType[i])))                    {                        rb = (RadioButton)rdogrpHHType.getChildAt(i);                        rb.setChecked(true);                    }                }                txtWRUn.setText(item.getWRUn());                txtWRVill.setText(item.getWRVill());                txtWRNo.setText(item.getWRNo());                txtWRHHNo.setText(item.getWRHHNo());                txtWRHHNo.setEnabled(false);                txtHHDist.setText(item.getHHDist());                txtHHUpz.setText(item.getHHUpz());                txtHHUn.setText(item.getHHUn());                txtHHVill.setText(item.getHHVill());                txtHHNo.setText(item.getHHNo());                txtScreeningID.setText(item.getScreeningID());                txtBenName.setText(item.getBenName());                txtHeadName.setText(item.getHeadName());                txtFName.setText(item.getFName());                txtHsuName.setText(item.getHsuName());                txtMobNo.setText(item.getMobNo());                txtReqMobNo.setText(item.getReqMobNo());                txtHHLocation.setText(item.getHHLocation());                txtResName.setText(item.getResName());                spnRelation.setSelection(Global.SpinnerItemPositionAnyLength(spnRelation, item.getRelation()));                String[] d_rdogrpQ1 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ1.length; i++)                {                    if (item.getQ1().equals(String.valueOf(d_rdogrpQ1[i])))                    {                        rb = (RadioButton)rdogrpQ1.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ2 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ2.length; i++)                {                    if (item.getQ2().equals(String.valueOf(d_rdogrpQ2[i])))                    {                        rb = (RadioButton)rdogrpQ2.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ3 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ3.length; i++)                {                    if (item.getQ3().equals(String.valueOf(d_rdogrpQ3[i])))                    {                        rb = (RadioButton)rdogrpQ3.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ4 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ4.length; i++)                {                    if (item.getQ4().equals(String.valueOf(d_rdogrpQ4[i])))                    {                        rb = (RadioButton)rdogrpQ4.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ5 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ5.length; i++)                {                    if (item.getQ5().equals(String.valueOf(d_rdogrpQ5[i])))                    {                        rb = (RadioButton)rdogrpQ5.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ6 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ6.length; i++)                {                    if (item.getQ6().equals(String.valueOf(d_rdogrpQ6[i])))                    {                        rb = (RadioButton)rdogrpQ6.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ7 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ7.length; i++)                {                    if (item.getQ7().equals(String.valueOf(d_rdogrpQ7[i])))                    {                        rb = (RadioButton)rdogrpQ7.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ8 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ8.length; i++)                {                    if (item.getQ8().equals(String.valueOf(d_rdogrpQ8[i])))                    {                        rb = (RadioButton)rdogrpQ8.getChildAt(i);                        rb.setChecked(true);                    }                }                txtQ8a.setText(item.getQ8a());                String[] d_rdogrpQ9 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ9.length; i++)                {                    if (item.getQ9().equals(String.valueOf(d_rdogrpQ9[i])))                    {                        rb = (RadioButton)rdogrpQ9.getChildAt(i);                        rb.setChecked(true);                    }                }                dtpBDate.setText(item.getBDate().toString().length()==0 ? "" : Global.DateConvertDMY(item.getBDate()));                String[] d_rdogrpQ9a = new String[] {"1","2","3","4"};                for (int i = 0; i < d_rdogrpQ9a.length; i++)                {                    if (item.getQ9a().equals(String.valueOf(d_rdogrpQ9a[i])))                    {                        rb = (RadioButton)rdogrpQ9a.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ10 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ10.length; i++)                {                    if (item.getQ10().equals(String.valueOf(d_rdogrpQ10[i])))                    {                        rb = (RadioButton)rdogrpQ10.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ10a = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ10a.length; i++)                {                    if (item.getQ10a().equals(String.valueOf(d_rdogrpQ10a[i])))                    {                        rb = (RadioButton)rdogrpQ10a.getChildAt(i);                        rb.setChecked(true);                    }                }                String[] d_rdogrpQ11 = new String[] {"1","0"};                for (int i = 0; i < d_rdogrpQ11.length; i++)                {                    if (item.getQ11().equals(String.valueOf(d_rdogrpQ11[i])))                    {                        rb = (RadioButton)rdogrpQ11.getChildAt(i);                        rb.setChecked(true);                    }                }                txtComments.setText(item.getComments());            }        }        catch(Exception  e)        {            Connection.MessageBox(Screening.this, e.getMessage());            return;        }    }    protected Dialog onCreateDialog(int id) {        final Calendar c = Calendar.getInstance();        hour = c.get(Calendar.HOUR_OF_DAY);        minute = c.get(Calendar.MINUTE);        switch (id) {            case DATE_DIALOG:                return new DatePickerDialog(this, mDateSetListener,g.mYear,g.mMonth-1,g.mDay);            case TIME_DIALOG:                return new TimePickerDialog(this, timePickerListener, hour, minute,false);        }        return null;    }    private void GenerateSuchanaID() {        String D = spnDist.getSelectedItemPosition() > 0 ? Connection.SelectedSpinnerValue(spnDist.getSelectedItem().toString(), "-") : "";        String U = spnUpz.getSelectedItemPosition() > 0 ? Connection.SelectedSpinnerValue(spnUpz.getSelectedItem().toString(), "-") : "";        String Un = spnUn.getSelectedItemPosition() > 0 ? Connection.SelectedSpinnerValue(spnUn.getSelectedItem().toString(), "-") : "";        String Vil = spnVill.getSelectedItemPosition() > 0 ? Connection.SelectedSpinnerValue(spnVill.getSelectedItem().toString(), "-") : "";        String SID = D + U + Un + Vil + txtWRHHNo.getText().toString();        txtScreeningID.setText(SID);    }    //GPS Reading    //.....................................................................................................    public void FindLocation() {        LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);        LocationListener locationListener = new LocationListener() {            public void onLocationChanged(Location location) {                updateLocation(location);            }            public void onStatusChanged(String provider, int status, Bundle extras) {            }            public void onProviderEnabled(String provider) {            }            public void onProviderDisabled(String provider) {            }        };        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);    }    void updateLocation(Location location) {        currentLocation  = location;        currentLatitude  = currentLocation.getLatitude();        currentLongitude = currentLocation.getLongitude();    }    // Method to turn on GPS    public void turnGPSOn(){        try        {            String provider = Settings.Secure.getString(getContentResolver(), Settings.Secure.LOCATION_PROVIDERS_ALLOWED);            if(!provider.contains("gps")){ //if gps is disabled                final Intent poke = new Intent();                poke.setClassName("com.android.settings", "com.android.settings.widget.SettingsAppWidgetProvider");                poke.addCategory(Intent.CATEGORY_ALTERNATIVE);                poke.setData(Uri.parse("3"));                sendBroadcast(poke);            }        }        catch (Exception e) {        }    }    // Method to turn off the GPS    public void turnGPSOff(){        String provider = Settings.Secure.getString(getContentResolver(), Settings.Secure.LOCATION_PROVIDERS_ALLOWED);        if(provider.contains("gps")){ //if gps is enabled            final Intent poke = new Intent();            poke.setClassName("com.android.settings", "com.android.settings.widget.SettingsAppWidgetProvider");            poke.addCategory(Intent.CATEGORY_ALTERNATIVE);            poke.setData(Uri.parse("3"));            sendBroadcast(poke);        }    }    // turning off the GPS if its in on state. to avoid the battery drain.    @Override    protected void onDestroy() {        // TODO Auto-generated method stub        super.onDestroy();        turnGPSOff();    }}